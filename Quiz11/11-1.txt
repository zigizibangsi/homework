// ======================================================================
// 타입스크립트 단답형 퀴즈
// ======================================================================

1-1) 타입 지정하기
각각의 상수에 아래 예시처럼 적절한 타입을 명시해 주세요.
예) const appleCount: number = 13

a. const myname: string = “철수”
b. const breadCount: number = 2
c. const isActive: boolean = false

1-2) 배열형 타입 지정하기
아래 배열 상수가 선언되어 있습니다. 각각의 배열 상수에 적절한 타입을 명시해 주세요.
예) const ages: number[] = [13, 8, 12, 16]

a. const classmates: string[] = [“철수”, “영희”, “훈이”]
b. const candyCounts: number[] = [2, 6, 4]
c. const moneyList: number[] | string[] = [1000, 2500, 4300] 또는 [”1000원”, “2500원”, “4300원”]
d. const isActiveList: boolean[] | string[] = [true, false, “false”, “true”, false]

 1-3) 객체형 타입 지정하기
 아래 객체 상수가 선언되어 있습니다. 각각의 객체 상수에 적절한 타입을 명시해 주세요.

 예) 아래 profiles에 들어갈 적절한 타입을 만들고 적용해 주세요.

     interface IProfile {
          name: string
          age: number
          school: string
     }

     const profiles: IProfile = {
          name: “철수”,
          age: 13,
          school: “다람쥐초등학교”
     }

아래 createBoardInput에 들어갈 적절한 타입을 만들고 적용해 주세요.

a. interface ICreateBoardInput {
    writer: string
    title: string
    contents: string
}

const createBoardInput: ICreateBoardInput = {
     writer: “영희”,
     title: “좋은 날씨 입니다~”,
     contents: “오늘은 특히 더 날씨가 좋네요^^”
}

b. 아래 updateBoardInput1, updateBoardInput2에 공통으로 들어갈 적절한 타입을 만들고 적용해 주세요.

interface IUpdateBoardInput {

    writer: string
    title? string
    contents: string

}

const updateBoardInput1: IUpdateBoardInput = {
     writer: “영희”,
     title: “좋은 날씨 입니다~”,
     contents: “오늘은 특히 더 날씨가 좋네요^^”
}

const updateBoardInput2: IUpdateBoardInput = {
     writer: “훈이”,
     contents: “기존에 작성한 글 내용 일부가 수정됐네요”
}